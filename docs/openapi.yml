openapi: 3.0.0
info:
  title: Job Board with Application Submission
  description: APIs required for all major operations in a job board.
  version: 1.0.0
tags:
  - name: User Authentication, Registration, and Logout APIs
    description: APIs for user registration, authentication, and logout.
  - name: Employer APIs
    description: APIs for performing employer operations.
  - name: Jobseeker APIs
    description: APIs for jobseeker operations.
paths:
  /api/users/register:
    post:
      summary: Register a new user
      tags:
        - User Authentication, Registration, and Logout APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                usertype:
                  type: integer
                  description: '1 for Job Seeker, 2 for Employer'
      responses:
        '200':
          description: Successful user registration
          content:
            application/json:
              example:
                status: success
                message: User registered successfully.
                userId: 353
        '400':
          description: Bad request - Validation errors or invalid JSON format
          content:
            application/json:
              example:
                username: Invalid or missing username.
                email: Invalid or missing email address.
                password: Invalid or missing password. Password must be at least 8 characters.
                usertype: Invalid or missing user type. Accepted values are '1. Job Seeker' or '2. Employer'.
        '401':
          description: User registration exception
          content:
            application/json:
              example:
                status: error
                message: User registration exception message.
        '500':
          description: Internal Server Error - Database operation failed
          content:
            application/json:
              example:
                status: error
                message: Database operation failed.

  /api/users/login:
    post:
      summary: Authenticate a user and generate JWT token
      tags:
        - User Authentication, Registration, and Logout APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              example:
                status: Authentication success
                user id: 87
                user type: Employer
                token: <JWT_TOKEN>
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              example:
                status: error
                message:
                  email: Invalid or missing email address.
        '401':
          description: Unauthorized - Invalid username or password
          content:
            application/json:
              example:
                status: error
                message: Invalid username or password
        '500':
          description: Internal Server Error - Failed to generate JWT token
          content:
            application/json:
              example:
                status: error
                message: Failed to generate JWT token.

  /api/users/logout:
    post:
      summary: Logout a user and expire the JWT token
      tags:
        - User Authentication, Registration, and Logout APIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              example:
                status: success
                message: Logout successful.
                token: <EXPIRED_JWT_TOKEN>
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              example:
                status: error
                message: Invalid or missing token.

  /api/employer/job-post:
    post:
      summary: Post a new job
      tags:
        - Employer APIs
      requestBody:
        required: true
        content:
          application/json:
            example:
              industry: 1
              jobType: 2
              jobTitle: Software Engineer
              jobDescription: Exciting opportunity for a software engineer...
              requirements: Bachelor's degree in Computer Science...
              location: 13
      responses:
        '200':
          description: Job posted successfully
          content:
            application/json:
              example:
                status: success
                message: Job posted successfully.
                jobPostId: 45

  /api/employer/job-post/{jobId}:
    put:
      summary: Edit job details
      tags:
        - Employer APIs
      parameters:
        - in: path
          name: jobId
          required: true
          description: The ID of the job to be edited
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              location: 5
              jobType: 1
      responses:
        '200':
          description: Job details updated successfully
          content:
            application/json:
              example:
                status: success
                message: Job details updated successfully.
                updatedData:
                  location: "Bengaluru"
                  jobType: "Full Time"

    delete:
      summary: Delete a job
      tags:
        - Employer APIs
      parameters:
        - in: path
          name: jobId
          required: true
          description: The ID of the job to be deleted
          schema:
            type: integer
      responses:
        '200':
          description: Job deleted successfully
          content:
            application/json:
              example:
                status: success
                message: Job deleted successfully.
